#pragma once

#include <random>
#include <string>
#include <iomanip>
#include <unordered_map>
#include "tagged.h"
#include "model.h"

namespace detail {
struct TokenTag {
};
}  // namespace detail

namespace app {


class Player {
public:
    Player(std::string name) : playerId(nextId++), name_(name) {}
    uint32_t GetPlayerId() const { return playerId; }
    std::string GetName() const {return name_; }
private:
    static uint32_t nextId;
    uint32_t playerId  = 0;
    std::string name_;
    model::GameSession* session_;
    model::Dog* dog_;
};

class Players {
public:

private:

};

//Add(dog, session):Player&
//FindByDogIdAndMapId(dog_id, map_id):Player*

using Token = util::Tagged<std::string, detail::TokenTag>;

class PlayerTokens {
public:
    Token generateToken();
    Token AddPlayer(Player& player);
    Player* FindPlayerByToken(const Token& token);

private:

    std::random_device random_device_;
    std::mt19937_64 generator1_{[this] {
        std::uniform_int_distribution<std::mt19937_64::result_type> dist;
        return dist(random_device_);
    }()};
    std::mt19937_64 generator2_{[this] {
        std::uniform_int_distribution<std::mt19937_64::result_type> dist;
        return dist(random_device_);
    }()};
    // Чтобы сгенерировать токен, получите из generator1_ и generator2_
    // два 64-разрядных числа и, переведя их в hex-строки, склейте в одну.
    // Вы можете поэкспериментировать с алгоритмом генерирования токенов,
    // чтобы сделать их подбор ещё более затруднительным

    using MapTokenHasher = util::TaggedHasher<Token>;
    using MapTokenToPlayer = std::unordered_map<Token, Player*, MapTokenHasher>;
    MapTokenToPlayer token_to_player_;

};


} // namespace app
